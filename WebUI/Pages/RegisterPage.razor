@page "/register"
@using Application.DTOs.Auth
@using Microsoft.AspNetCore.Components.Forms
<h3>Register</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

<EditForm Model="@RegisterModel" OnValidSubmit="RegisterAsync">
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText class="form-control" id="name" @bind-Value="RegisterModel.Name" />
        <ValidationMessage For="@(() => RegisterModel.Name)" />
    </div>
    <div class="form-group">
        <label for="email">Email:</label>
        <InputText class="form-control" id="email" @bind-Value="RegisterModel.Email" />
        <ValidationMessage For="@(() => RegisterModel.Email)" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText type="password" class="form-control" id="password" @bind-Value="RegisterModel.Password" />
        <ValidationMessage For="@(() => RegisterModel.Password)" />
    </div>
    <div class="form-group">
        <label for="confirmPassword">Confirm Password:</label>
        <InputText type="password" class="form-control" id="confirmPassword" @bind-Value="RegisterModel.ConfirmPassword" />
        <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    RegisterDTO RegisterModel = new RegisterDTO();
    string? ErrorMessage = string.Empty;

    async Task RegisterAsync()
    {
        var result = await AccountService.RegisterAccountAsync(RegisterModel);
        if (result.Flag)
        {
            NavManager.NavigateTo("/login");
        }
        else
        {
            ErrorMessage = result.Message;
        }
    }
}
